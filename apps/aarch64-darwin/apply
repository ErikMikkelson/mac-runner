#!/usr/bin/env bash

VERSION=1.0

# Color codes
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Determine the operating system
export OS=$(uname)

# Custom print function
_print() {
  if [[ "$OS" == "Darwin" ]]; then
    echo -e "$1"
  else
    echo "$1"
  fi
}

# Exit if we're not on Mac
if [[ "$OS" != "Darwin" ]]; then
  _print "${RED}Not supported on linux.${NC}" && exit 1
fi


# Custom prompt function
_prompt() {
  local message="$1"
  local variable="$2"

  _print "$message"
  read -r $variable
}

# Fetch username from the system
export USERNAME=$(whoami)

# If the username is 'nixos' or 'root', ask the user for their username
if [[ "$USERNAME" == "nixos" ]] || [[ "$USERNAME" == "root" ]]; then
  _prompt "${YELLOW}You're running as $USERNAME. Please enter your desired username: ${NC}" USERNAME
fi

confirm_details() {
  _print "${GREEN}Username: $USERNAME"

  _prompt "${YELLOW}Is this correct? (Y/N): ${NC}" choice

  case "$choice" in
  [Nn] ) _print "${RED}Exiting script.${NC}" && exit 1;;
  [Yy] ) _print "${GREEN}Continuing...${NC}";;
  * ) _print "${RED}Invalid option. Exiting script.${NC}" && exit 1;;
  esac
}

confirm_details

# Function to replace tokens in each file
replace_tokens() {
  local file="$1"
  if [[ $(basename $1) != "apply" ]]; then
    if [[ "$OS" == "Darwin" ]]; then
      # macOS
      LC_ALL=C LANG=C sed -i '' -e "s/%USER%/$USERNAME/g" "$file"
    else
      # Linux or other
      _print "${RED}Not supported on linux.${NC}" && exit 1
    fi
  fi
}

# Traverse directories and call replace_tokens on each Nix file
export -f replace_tokens
find . -type f -exec bash -c 'replace_tokens "$0"' {} \;

echo "$USERNAME" > /tmp/username.txt
_print "${GREEN}User $USERNAME information applied.${NC}"
